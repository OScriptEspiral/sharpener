{"version":3,"sources":["store/client.js","api/index.js","Landing/Landing.js","Home/Home.js","Home/index.js","App/App.js","store/reducers/userReducer.js","store/reducers/index.js","store/constants.js","store/actions/login.js","store/routes.js","store/index.js","index.js"],"names":["client","axios","create","baseURL","responseType","loginURI","redirectToGithub","window","location","Landing","onClick","Home","token","loading","ConnectedHome","connect","user","isLoadingData","componentsMap","LANDING","HOME","NOT_FOUND","App","propTypes","PropTypes","string","isRequired","state","type","appReducers","action","payload","avatar","email","name","nickname","isLoggedIn","userData","data","loginSuccess","loginActions","routesMap","path","thunk","dispatch","getState","code","query","get","authenticateUser","then","store","connectRoutes","scrollTop","querySerializer","queryString","middleware","enhancer","reducer","rootReducer","combineReducers","args","middlewares","applyMiddleware","enhancers","composeWithDevTools","createStore","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d13865bf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst client = axios.create({\n  baseURL:'',\n  responseType: 'json'\n});\n\nexport default client;\n","import client from 'store/client';\n\n\nconst CLIENT_ID = \"36689cf871668e2b775e\"\nconst GITHUB_URI = \"https://github.com/login/oauth/authorize\"\nconst REDIRECT_URI = \"http://sharpener-cloud.appspot.com\"\n\nconst AUTH_URI = \"/authenticate\"\nconst loginURI = `${GITHUB_URI}?client_id=${CLIENT_ID}&scope=user&redirect_uri=${REDIRECT_URI}`;\n\nconst redirectToGithub = () => {\n  window.location = loginURI;\n};\n\nconst authenticateUser = code => client.get(`${AUTH_URI}/${code}`)\n\nexport {\n  redirectToGithub,\n  authenticateUser,\n};\n","import React from 'react';\nimport { redirectToGithub } from 'api';\n\nconst Landing = () => (\n  <div>\n    <button onClick={redirectToGithub}> Login</button>  \n  </div>\n);\n\nexport default Landing;\n","import React from 'react';\n\nconst Home = ({ token, loading }) =>(\n  loading \n  ?(<div> Loading your user data...</div>)\n  :<div> Your CLI token is: {token}</div>\n)\n\n export default Home;\n","import Home from './Home';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = ({ user }) => ({\n  token: user.token,\n  loading: user.isLoadingData,\n});\n\nconst ConnectedHome = connect(mapStateToProps)(Home);\n\nexport default ConnectedHome;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Landing from 'Landing';\nimport Home from 'Home';\nimport { NOT_FOUND } from 'redux-first-router';\nimport { connect } from 'react-redux'\n\nconst componentsMap = {\n  LANDING: <Landing />,\n  HOME: <Home />,\n  [NOT_FOUND]: <div>Not found</div>,\n}; \n\nconst App = ({ location }) => componentsMap[location] || componentsMap[NOT_FOUND];\n\nconst mapStateToProps = state => ({\n  location: state.location.type,\n});\n\nApp.propTypes = {\n  location: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(App);\n","import { LOGIN_SUCCESS, LOGIN_DATA } from 'store/constants';\n\nconst loginReducer = (state = false, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case LOGIN_DATA:\n      const { avatar, email, token,\n        name, nickname } =  payload;\n      return {\n        ...state,\n        avatar,\n        email,\n        token,\n        name,\n        nickname,\n        isLoadingData: false,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoadingData: true,\n        isLoggedIn: true \n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","import user from './userReducer';\nconst appReducers = {\nuser,\n}\n\nexport default appReducers;\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_DATA = \"LOGIN_DATA\";\n","import { LOGIN_SUCCESS, LOGIN_DATA } from \"store/constants\";\n\n\nexport const userData = (data) => ({\n  type: LOGIN_DATA,\n  payload: {\n    ...data\n  }\n})\n\nexport const loginSuccess = () => ({\n  type: LOGIN_SUCCESS,\n})\n","import { loginActions } from 'store/actions';\nimport { authenticateUser } from 'api';\n\nconst { userData, loginSuccess } = loginActions;\n\nconst landingThunk = (dispatch, getState) => {\n  const { location, user } = getState();\n  if(user.isLoggedIn){\n    dispatch({\n      type:'HOME'\n    });\n  }\n  const code = location.query? location.query.code: \"\";\n  if(code) {\n    dispatch(loginSuccess());\n    dispatch({\n      type:'HOME'\n    });\n    authenticateUser(code).then( ({ data }) =>{\n      dispatch(userData(data));\n    })\n  }\n}\n\nconst homeThunk = (dispatch, getState) => {\n  const { user } = getState();\n  if(!user.isLoggedIn){\n    dispatch({\n      type:'LANDING'\n    });\n  }\n}\n\nconst routesMap = {\n  LANDING: { \n    path:'/',\n    thunk: landingThunk,\n  },\n  HOME: {\n    path:'/home',\n    thunk: homeThunk,\n  },\n}\n\nexport default routesMap;\n","import { connectRoutes } from 'redux-first-router';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport queryString from 'query-string';\nimport appReducers from 'store/reducers';\nimport routesMap from './routes'\n\nconst configureStore = (...args) => {\n  const { middleware, enhancer, reducer } = connectRoutes(\n    routesMap,\n    {\n      scrollTop: true,\n      querySerializer: queryString\n    },\n  );\n\n  const rootReducer = combineReducers({  location: reducer, ...appReducers })\n  const middlewares = applyMiddleware(middleware, ...args)\n  const enhancers = composeWithDevTools(enhancer, middlewares)\n  const { user }  = window;\n\n  const store = createStore(rootReducer,{user}, enhancers)\n\n  return store;\n}\n\nexport default configureStore;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App';\nimport { Provider } from 'react-redux'\n\nimport configureStore from 'store';\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}